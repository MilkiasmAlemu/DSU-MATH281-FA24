### A Pluto.jl notebook ###
# v0.19.46

using Markdown
using InteractiveUtils

# This Pluto notebook uses @bind for interactivity. When running this notebook outside of Pluto, the following 'mock version' of @bind gives bound variables a default value (instead of an error).
macro bind(def, element)
    quote
        local iv = try Base.loaded_modules[Base.PkgId(Base.UUID("6e696c72-6542-2067-7265-42206c756150"), "AbstractPlutoDingetjes")].Bonds.initial_value catch; b -> missing; end
        local el = $(esc(element))
        global $(esc(def)) = Core.applicable(Base.get, el) ? Base.get(el) : iv(el)
        el
    end
end

# ╔═╡ c18b2f58-0c46-4668-ab95-c2d8377d6ae1
using PlutoUI, PlutoTeachingTools, HypertextLiteral, LaTeXStrings

# ╔═╡ eaa7c909-de3c-442b-9fae-7b10f00b7cbd
using StatsBase

# ╔═╡ 4a8b4ce5-997b-4737-8f2a-acbd983fa57e
@htl("<h1>Probability Lab</h1>")

# ╔═╡ ff120624-320f-41a6-8606-24d660d7f080
TableOfContents()

# ╔═╡ 27255d3f-8fe2-4b09-86b3-dcccf60122dd
md"""
##### These are the different packages being used for today.
"""

# ╔═╡ 053fdb33-1029-41d8-a144-c990b2a8d3a6
md"---"

# ╔═╡ 7a9b1f1b-3cbb-4b82-99c1-67ed598f6297
@htl("<h2>Theoretical Probability</h2>")

# ╔═╡ 8499f7f7-22f5-4dd1-a619-a531e35daf92
@htl("<h3>Venn Diagrams</h3>")

# ╔═╡ 8d8c78e4-9796-4c34-a568-84650e9838aa
@htl("<h4> Number of Events: &nbsp&nbsp&nbsp N = $(@bind N Slider(0:10, default=2, show_value=true))</h4>")

# ╔═╡ 1aa6d170-66a6-48da-983e-29fb5477d58f
@htl("<div>$(@bind resetVenn Button("Reset this Venn Diagram"))</div>")

# ╔═╡ 45776f66-9f41-4a45-9434-3d1b31a5ad7d
begin
	resetVenn
	@htl("
	<body>
	<script src=\"https://d3js.org/d3.v5.min.js\"></script>
	<script src=\"https://cdnjs.cloudflare.com/ajax/libs/venn.js/0.2.20/venn.min.js\"></script>
	
	<div id=\"venn\"></div>
	
	<script>
	var N = $(N);
	var baseColors = d3.schemeCategory10.slice(0, N);
	
	var sets = [];
	var labels = Array.from({length: N}, (_, i) => String.fromCharCode(65 + i));
	var colorDict = {};
	
	labels.forEach((label, i) => {
		colorDict[[label]] = baseColors[label]
	    sets.push({
	        sets: [label],
	        size: 10,
			color: baseColors[i]
	    });
	});
	
	for (var i = 2; i <= N; i++) {
	    combinations(labels, i).forEach((combo) => {
			var colors = combo.map(label => sets.find(set => set.sets[0] === label).color);
			var avgColor = d3.color(d3.interpolateRgbBasis(colors)(0.5)).copy({opacity: 0.75});
			colorDict[combo] = avgColor;
	        sets.push({
	            sets: combo,
	            size: 2+1/N,
				color: avgColor
	        });
	    });
	}
	
	function combinations(arr, k) {
	    if (k === 1) return arr.map(d => [d]);
	    return arr.flatMap((d, i) =>
	        combinations(arr.slice(i + 1), k - 1).map(combo => [d, ...combo])
	    );
	}
	
	var div = d3.select(\"#venn\")
	    .append(\"svg\")
	    .attr(\"width\", 500)
	    .attr(\"height\", 500)
	    .style(\"background-color\", \"white\");
	
	var vennDiagram = venn.VennDiagram()
	    .width(500)
	    .height(500);
	
	div.datum(sets).call(vennDiagram);
	
	div.selectAll(\"g\")
	.on(\"mouseover\", function(event, d) {
        venn.sortAreas(div, d);

        var selection = d3.select(this).transition(\"tooltip\").duration(400);
        var matchedSet = sets.find(set => JSON.stringify(set.sets) === JSON.stringify(d.sets));
        
        selection.select(\"path\")
            .style(\"stroke\", \"black\")
            .style(\"stroke-width\", 75)
            .style(\"fill\", matchedSet ? matchedSet.color : '#ccc')
            .style(\"fill-opacity\", .75)
            .style(\"stroke-opacity\", 1);
    })
    
    .on(\"mouseout\", function(event, d) {
        var selection = d3.select(this).transition(\"tooltip\").duration(400);
        var matchedSet = sets.find(set => JSON.stringify(set.sets) === JSON.stringify(d.sets));
        selection.select(\"path\")
            .style(\"stroke-width\", 0)
            .style(\"fill\", matchedSet ? matchedSet.color : '#ccc')
            .style(\"fill-opacity\", .25)
            .style(\"stroke-opacity\", 0);
    });
	</script>
	</body>
	")
end

# ╔═╡ 66b02b82-7de5-4c49-99d5-105e48d71318
@htl("<h3>Probability Formulas</h3>")

# ╔═╡ a9af8a68-e254-4f65-96e1-cd16c180d590
@htl("
<h4 style=\"text-indent:5%;\">Probability of the <b>Universe</b><h4>
<h6>
	<div style=\"margin: 0 auto; width:80%;\">
		<p>
			The <b>universe</b> is the name for the total sample space. This makes up <b>all</b> possible outcomes of a given experiment. For the experiment of flipping a coin, the sample space is &nbsp<b>{Heads, Tails}</b>&nbsp reflecting that there are only two outcomes.
		</p>
	</div>
</h6>
")

# ╔═╡ 80b9787b-306d-45f4-bce0-eb4c7f7eb21c
@htl("
<div style=\"margin: 0 auto; width:80%;\">
	$(question_box(@htl("<h6>Given an experiment, what is the probability that a random outcome occurs in the sample space? Equivalently, what is the proportion of the area of the Venn Diagram contained inside of its bounding box?</h6>")))
</div>
")

# ╔═╡ 8c93ef25-8158-4927-992b-065313f41d3c
@htl("
<div style=\"margin: 0 auto; width:80%;\">
	$(answer_box(@htl("<h6>If a random outcome occurs, then it must be among one of the potential outcomes, meaning that: $(md"$\operatorname{Prob}(U) = 1$")
	Equivalently, all of the area is contained inside of the bounding rectangle.</h6>")))
</div>
")

# ╔═╡ 41a8ce83-ce37-47c5-b382-f930687d44a3
@htl("
<h4 style=\"text-indent:5%;\">Probability of the <b>Complement</b><h4>
<h6>
	<div style=\"margin: 0 auto; width:80%;\">
		<p>
			Given an event <b>A</b>, the <b>complement</b>, denoted <b>Aᶜ</b>, is the event that the outcome that occurs in <b>not</b> in <b>A</b>. For the experiment of flipping a coin, and the event of a random flip being <b>Heads</b>, the complement is the other possible outcomes, meaning the complement is the outcome being a <b>Tails</b>.
		</p>
	</div>
</h6>
")

# ╔═╡ f625a360-c274-4c82-a675-02f0b0e35e3e
@htl("
<div style=\"margin: 0 auto; width:80%;\">
	$(question_box(@htl("<h6>Given an experiment and a single event <b>A</b> with probability $(md"$\operatorname{Prob}(A)$") What is the probability of <b>Aᶜ</b>? Equivalently, what is the proportion of the area of the Venn Diagram contained <b>outside</b> of <b>A</b>?</h6>")))
</div>
")

# ╔═╡ 4a3daf2d-7f2c-4dba-abd2-74ad7c331e17
@htl("
<div style=\"margin: 0 auto; width:80%;\">
	$(answer_box(@htl("<h6>If a random outcome occurs, then it either must be an outcome in the event <b>A</b> or not in the event, meaning that it is an outcome in <b>Aᶜ</b>, meaning that: $(md"$\operatorname{Prob}(A) + \operatorname{Prob}(A^c) = 1$")
	Equivalently, the area outside of <b>A</b> is the whole area minus the area inside of <b>A</b>.</h6>")))
</div>
")

# ╔═╡ 6737889c-9463-4295-b501-92c778db3b54
@htl("
<h4 style=\"text-indent:5%;\">Probability of a <b>Union</b><h4>
<h6>
	<div style=\"margin: 0 auto; width:80%;\">
		<p>
			Given two events <b>A</b> and <b>B</b>, the <b>union</b>, <b>A ∪ B</b>, is the event that an outcome occurs is in at least one of <b>A</b> or <b>B</b>. The <b>intersection</b>, <b>A ∩ B</b>, is the event that an outcome occurs in <b>both</b> <b>A</b> and <b>B</b>.
		</p>
	</div>
</h6>
")

# ╔═╡ e0761f23-5e9e-46fb-9195-11862782bb7d
@htl("
<div style=\"margin: 0 auto; width:80%;\">
	$(question_box(@htl("<h6>Given an experiment and two events <b>A</b> and <b>B</b>, what is the probability that a random outcome occurs in the union? Equivalently, what is the proportion of the area of the Venn Diagram contained in at least one of <b>A</b> or <b>B</b>? Be careful here!</h6>")))
</div>
")

# ╔═╡ 51cbf4dd-b6a3-416f-a552-a8976af83055
@htl("
<div style=\"margin: 0 auto; width:80%;\">
	$(answer_box(@htl("<h6>If a random outcome occurs inside of at least one of <b>A</b> or <b>B</b>, then it must be occured in <b>A</b>, <b>B</b>, or both of them. So the likelihood of this outcome being in the union is almost the likelihood that it is in <b>A</b> plus the likelihood that it is in <b>B</b>, except that we are over-counting the situation where the outcome is in both events. $(md"$\operatorname{Prob}(A \cup B) = \operatorname{Prob}(A) + \operatorname{Prob}(B) - \operatorname{Prob}(A \cap B)$")
	Equivalently, the area in at least one of <b>A</b> or <b>B</b> is the sum of the two areas <b>minus</b> the overlap.</h6>")))
</div>
")

# ╔═╡ e35fedd6-857e-418c-be4d-8d2c38704012
@htl("
<div style=\"margin: 0 auto; width:80%;\">
	$(question_box(@htl("<h6>How might you try to generalize this to the union of more than two events?</h6>")))
</div>
")

# ╔═╡ 8075113f-9c13-4217-82ff-5b41c0942b82
md"---"

# ╔═╡ 915e0506-0010-4ef9-8594-95f898e21569
@htl("<h2>Empirical Probability</h2>")

# ╔═╡ da05eb28-40b6-42f9-bd2b-6b6006f5a786
@htl("<h3>Flipping a Coin</h3>")

# ╔═╡ da443a18-54c6-4f60-8295-da21a4c0d781
@htl("
<h4 style=\"text-indent:5%;\">Probability of a Coin Flip</b><h4>
<h6>
	<div style=\"margin: 0 auto; width:80%;\">
		<p>
			Since a single coin flip has only two outcomes (ignoring landing on the edge) that are both equally likely (if the coin is not weighted), then the probability of getting a <b>Heads</b> and the probability of getting a <b>Tails</b> are each equal to 50%.<br><br>
			Let's try to see this experimentally!
		</p>
	</div>
</h6>
")

# ╔═╡ 80e42029-9437-4962-92a4-e6737550b281
aside(@htl("The way to pick <b>n</b> random elements from a list <b>MyArray</b> is:
$(md"```julia
rand(MyArray, n)
```")"))

# ╔═╡ 9e3a353e-7d67-4c4e-a77f-c4ff6e2cb2e5
@htl("<h4> Number of Coin Flips: &nbsp&nbsp&nbspn = $(@bind n Slider(1:10000, default=1, show_value=true, max_steps=10000))</h4>")

# ╔═╡ 1680befd-f3c5-4ae0-b057-4ef6fc7741de
CoinFlips = rand(["Heads", "Tails"], n)

# ╔═╡ d1162602-ac39-4202-85ec-f7162eca861f
@htl("<h6>It's hard to see all of these different flips, but we can count them!</h6>")

# ╔═╡ 87774a82-be4b-4898-9184-5bdb3ffb1a9a
aside(@htl("The way to count the entries in an array is:
$(md"```julia
countmap(MyArray)
```")
<br>
And the way to see its total size is:
$(md"```julia
length(MyArray)
```")"))

# ╔═╡ b1809169-f076-40a9-8858-418174f90114
countmap(CoinFlips)

# ╔═╡ 54df423a-438e-43b2-a52f-dffdedb5f337
length(CoinFlips)

# ╔═╡ 82f7d885-3c6a-472e-88ae-3ae87c3c2fd2
@htl("<h6>Here's a visualization of what is going on:</h6>")

# ╔═╡ a99cd78b-3379-4c3b-830b-3b560c0e3085
begin
	headsProb = "Heads" ∈ keys(countmap(CoinFlips)) ? countmap(CoinFlips)["Heads"] / length(CoinFlips) : 0
	tailsProb = "Tails" ∈ keys(countmap(CoinFlips)) ? countmap(CoinFlips)["Tails"] / length(CoinFlips) : 0

	@htl("
	<body>
	
	<div id=\"histogram\"></div>
	<script src=\"https://d3js.org/d3.v7.min.js\"></script>
	
	<script>
	        const width = 400;
	        const height = 300;
	
	        const margin = { top: 20, right: 30, bottom: 40, left: 40 };
	
	        const svg = d3.select(\"#histogram\")
	            .append(\"svg\")
	            .attr(\"width\", width)
	            .attr(\"height\", height)
	            .style(\"background-color\", \"white\");
	
	        const data = [
	            { label: \"Heads = $(round(100 * headsProb, digits = 2)) %\", value: height * $(headsProb) / 3}, // First column with M%
	            { label: \"Tails = $(round(100 * tailsProb, digits = 2)) %\", value: height * $(tailsProb) / 3 }  // Second column with N%
	        ];
	
	        const yScale = d3.scaleLinear()
	            .domain([0, 100]) // Scale based on percentage
	            .range([height - margin.bottom, margin.top]);
	
	        const xScale = d3.scaleBand()
	            .domain(data.map(d => d.label))
	            .range([margin.left, width - margin.right])
	            .padding(0.5);
	
			svg.append(\"line\")
	            .attr(\"x1\", margin.left)
	            .attr(\"x2\", width - margin.right)
	            .attr(\"y1\", yScale(50))
	            .attr(\"y2\", yScale(50))
	            .attr(\"stroke\", \"black\")
	            .attr(\"stroke-width\", 2)
	            .attr(\"stroke-dasharray\", \"5,5\");
	
			svg.append(\"text\")
	            .attr(\"x\", width - margin.right - 10)
	            .attr(\"y\", yScale(50) - 5)
	            .attr(\"text-anchor\", \"end\")
	            .attr(\"font-size\", \"12px\")
	            .attr(\"fill\", \"black\")
	            .text(\"Expected Probability\");
			
	        svg.selectAll(\".bar\")
	            .data(data)
	            .enter()
	            .append(\"rect\")
	            .attr(\"class\", \"bar\")
	            .attr(\"x\", d => xScale(d.label))
	            .attr(\"y\", d => yScale(d.value))
	            .attr(\"width\", xScale.bandwidth())
	            .attr(\"height\", d => height - margin.bottom - yScale(d.value))
	            .attr(\"fill\", (d, i) => i === 0 ? \"rgba(255, 0, 0, 0.5)\" : \"rgba(0, 0, 255, 0.5)\");
	
	        const xAxis = d3.axisBottom(xScale);
	
	        svg.append(\"g\")
	            .attr(\"transform\", `translate(0,\${height - margin.bottom})`)
	            .call(xAxis);
	    </script>
	</body>
	")
end

# ╔═╡ ce781ed3-22c9-4daa-9299-72bfc09a1089
@htl("
<div style=\"margin: 0 auto; width:80%;\">
	$(question_box(@htl("<h6>How do you think that you could simulate rolling a six sided die? How about flipping two coins?</h6>")))
</div>
")

# ╔═╡ 6414f70a-c192-4367-91ff-92709dd75e6f
@htl("<h3>Monte Carlo Integration</h3>")

# ╔═╡ d864111f-8d96-47e8-8dea-2aa8f29a4385
@htl("
<h4 style=\"text-indent:5%;\">Area</b><h4>
<h6>
	<div style=\"margin: 0 auto; width:80%;\">
		<p>
			In Calculus 2, a lot of work and time is put in to trying to calculate the area within different regions on a graph. For example, how could we possibly go about finding the area for <b>0 ≤ x ≤ 3</b> underneath the graph of the function: $(md"$f(x) = 1 + 2x - x^2$")
		</p>
	</div>
</h6>
")

# ╔═╡ 0a5dc2b3-1156-4b2d-94d3-3b49dcbe7653
@htl("
<body>
    <div id=\"plot\"></div>
	<script src=\"https://d3js.org/d3.v7.min.js\"></script>

    <script>
        const width = 300;
        const height = 400;
        const margin = { top: 20, right: 30, bottom: 40, left: 40 };

        const svg = d3.select(\"#plot\")
            .append(\"svg\")
            .attr(\"width\", width)
            .attr(\"height\", height)
            .style(\"background-color\", \"white\");

        const data = [];
        for (let x = -0.05; x <= 1.05; x += 0.01) {
            data.push({ x: x, y: 1 + 2*x - Math.pow(x, 2) });
        }

        const xScale = d3.scaleLinear()
            .domain([0, 1.05])
            .range([margin.left, width - margin.right]);

        const yScale = d3.scaleLinear()
            .domain([0, 2])
            .range([height - margin.bottom, margin.top]);

        const line = d3.line()
            .x(d => xScale(d.x))
            .y(d => yScale(d.y));

        svg.append(\"path\")
            .datum(data)
            .attr(\"fill\", \"none\")
            .attr(\"stroke\", \"blue\")
            .attr(\"stroke-width\", 2)
            .attr(\"d\", line);

		const area = d3.area()
            .x(d => xScale(d.x))
            .y0(yScale(0))
            .y1(d => yScale(d.y));

        svg.append(\"path\")
            .datum(data.filter(d => d.x >= 0 && d.x <= 1.01))
            .attr(\"fill\", \"rgba(0, 0, 255, 0.25)\")
            .attr(\"d\", area);

        svg.append(\"g\")
            .attr(\"transform\", \`translate(0,\${height - margin.bottom})\`)
            .call(d3.axisBottom(xScale));

        svg.append(\"g\")
            .attr(\"transform\", \`translate(\${margin.left},0)\`)
            .call(d3.axisLeft(yScale));

        svg.append(\"text\")
            .attr(\"x\", width / 2)
            .attr(\"y\", height - 10)
            .attr(\"text-anchor\", \"middle\")
            .attr(\"font-size\", \"12px\")
            .text(\"x\");

        svg.append(\"text\")
            .attr(\"transform\", \"rotate(-90)\")
            .attr(\"x\", -height / 2)
            .attr(\"y\", 15)
            .attr(\"text-anchor\", \"middle\")
            .attr(\"font-size\", \"12px\")
            .text(\"y\");
    </script>
</body>
")

# ╔═╡ 01923e40-fe6d-497b-a83f-f6c77b10116c
@htl("
<h4 style=\"text-indent:5%;\">Area</b><h4>
<h6>
	<div style=\"margin: 0 auto; width:80%;\">
		<p>
			Without knowing integration, finding this area is <b>very</b> challenging! However, we can cheat things a little bit. Imagine an experiment where we are throwing darts at a sheet of paper that is one foot wide and two feet tall. An outcome will be that the dart hits some point inside of this region (assuming we never miss!).
			<br><br>
			We now want to consider the event <b>A</b> that is the collection of outcomes where a dart lands <b>under</b> the graph of the function <b>y = f(x)</b>.
		</p>
	</div>
</h6>
")

# ╔═╡ 3cfe8aef-fb09-4ade-a7e3-999d5acbbbb2
@htl("
<div style=\"margin: 0 auto; width:80%;\">
	$(question_box(@htl("<h6>In this situation, what is the significance of <b>Prob(A)</b>?</h6>")))
</div>
")

# ╔═╡ e89484e7-95f1-44f1-8978-6d9a489aa2f8
@htl("<h6>We can try to empirically estimate <b>Prob(A)</b>!</h6>")

# ╔═╡ da443069-96bc-4463-8df5-6a7b7b936dd6
f(x) = 1 + 2x - x^2

# ╔═╡ f532f07d-a247-47af-8844-2df72329bea7
@htl("<h6>Let's first pick random points in the <b>xy</b>-plane with <b>x</b> between 0 and 1, and <b>y</b> between 0 and 2.</h6>")

# ╔═╡ f62f33c7-dc00-47bf-9e0e-56f804b02ae0
aside(@htl("If you don't include an array into <b>rand</b>, it gives you <b>m</b> a decimal between 0 and 1:
$(md"```julia
rand(m)
```")"))

# ╔═╡ e1192a15-eb97-498d-9c83-0ca2e3548c91
@htl("<h4> Number of Points: &nbsp&nbsp&nbspm = $(@bind m Slider(1:10000, default=1, show_value=true, max_steps=10000))</h4>")

# ╔═╡ 76c6c5a2-0b5c-4661-8960-3b2416e0b2d3
x = rand(m)

# ╔═╡ 7e61731a-7635-47f3-9a22-a50b0345c626
@htl("<h6>This works for our <b>x</b>-values, but for <b>y</b>, we need between 0 and 2, not 0 and 1.</h6>")

# ╔═╡ f7d17562-f27c-45d9-a2e6-51d7e87b87b2
y = 2 * rand(m)

# ╔═╡ 31468534-8ef7-4d19-9594-7d8aa4d7e533
@htl("<h6>We can now make our points by combining these two lists.</h6>")

# ╔═╡ 9b65092a-d1d2-48f1-8c78-0625ef11db0d
points = [(x[i], y[i]) for i in 1:m]

# ╔═╡ 5b5d5ca7-f320-43b9-bfba-b70c08d41c63
aside(@htl("We could also do this a bit more quickly with:
$(md"```julia
collect(zip(x,y))
```")
Which \"zips\" the two arrays together like the two halves of a zipper."); v_offset=-50)

# ╔═╡ c630e5be-601f-4927-8658-60e44d13c4de
@htl("<h6>Now that we have all of these random <b>(x,y)</b>-pairs where our simulated dart hit, we can check to see if the point is under the curve, meaning that for a point <b>(a,b)</b> we want to see if:
$(md"$0\leq b\leq f(a)$")</h6>")

# ╔═╡ 87fcdb54-e11b-4298-b8a7-12bc25d65449
aside(@htl("In order to select entries from a list  that are true for some logical test:
$(md"```julia
filter(entry -> test, MyArray)
```")"); v_offset=50)

# ╔═╡ 4c3661e8-2985-4a17-b617-ec2be9cafb90
validPoints = filter(point -> 0 ≤ point[2] ≤ f(point[1]), points)

# ╔═╡ 0d7a44a2-2fec-4246-b0fe-8669f0f2b973
invalidPoints = filter(point -> 2 ≥ point[2] > f(point[1]), points)

# ╔═╡ e830da51-c55f-43fb-a57e-715d4eced3a9
@htl("
<body>
    <div id=\"plotMonteCarlo\"></div>
	<script src=\"https://d3js.org/d3.v7.min.js\"></script>

    <script>
        // Set up the dimensions of the SVG
        const width = 300;
        const height = 400;
        const margin = { top: 20, right: 30, bottom: 40, left: 40 };

        // Create the SVG element
        const svg = d3.select(\"#plotMonteCarlo\")
            .append(\"svg\")
            .attr(\"width\", width)
            .attr(\"height\", height)
            .style(\"background-color\", \"white\");

        // Define the data points for the function y = x^2 - 3x + 1
        const data = [];
        for (let x = -0.05; x <= 1.05; x += 0.01) {
            data.push({ x: x, y: 1 + 2*x - Math.pow(x, 2) });
        }

        // Set up the scales
        const xScale = d3.scaleLinear()
            .domain([0, 1.05])
            .range([margin.left, width - margin.right]);

        const yScale = d3.scaleLinear()
            .domain([0, 2])
            .range([height - margin.bottom, margin.top]);

        // Create the line generator
        const line = d3.line()
            .x(d => xScale(d.x))
            .y(d => yScale(d.y));

        // Plot the function line
        svg.append(\"path\")
            .datum(data)
            .attr(\"fill\", \"none\")
            .attr(\"stroke\", \"blue\")
            .attr(\"stroke-width\", 2)
            .attr(\"d\", line);

		const area = d3.area()
            .x(d => xScale(d.x))
            .y0(yScale(0))
            .y1(d => yScale(d.y));

        svg.append(\"path\")
            .datum(data.filter(d => d.x >= 0 && d.x <= 1.01))
            .attr(\"fill\", \"rgba(0, 0, 255, 0.25)\")
            .attr(\"d\", area);

        // Add x-axis
        svg.append(\"g\")
            .attr(\"transform\", \`translate(0,\${height - margin.bottom})\`)
            .call(d3.axisBottom(xScale));

        // Add y-axis
        svg.append(\"g\")
            .attr(\"transform\", \`translate(\${margin.left},0)\`)
            .call(d3.axisLeft(yScale));

        // Add axis labels
        svg.append(\"text\")
            .attr(\"x\", width / 2)
            .attr(\"y\", height - 10)
            .attr(\"text-anchor\", \"middle\")
            .attr(\"font-size\", \"12px\")
            .text(\"x\");

        svg.append(\"text\")
            .attr(\"transform\", \"rotate(-90)\")
            .attr(\"x\", -height / 2)
            .attr(\"y\", 15)
            .attr(\"text-anchor\", \"middle\")
            .attr(\"font-size\", \"12px\")
            .text(\"y\");

		const opac = $(round(1/m^(1/10); digits=2))
		const rad = $(round(10/m^(1/10); digits=2))

		const validPoints = $(validPoints);
		svg.selectAll(\".valid-point\")
            .data(validPoints)
            .enter()
            .append(\"circle\")
            .attr(\"cx\", d => xScale(d[0]))
            .attr(\"cy\", d => yScale(d[1]))
            .attr(\"r\", \`\${rad}\`)
            .attr(\"fill\", \`rgba(100, 255, 100, \${opac})\`)
			.attr(\"class\", \"valid-point\");

		const invalidPoints = $(invalidPoints);
		svg.selectAll(\".invalid-point\")
            .data(invalidPoints)
            .enter()
            .append(\"circle\")
            .attr(\"cx\", d => xScale(d[0]))
            .attr(\"cy\", d => yScale(d[1]))
            .attr(\"r\", \`\${rad}\`)
            .attr(\"fill\", \`rgba(255, 100, 100, \${opac})\`)
			.attr(\"class\", \"invalid-point\");
    </script>
</body>
")

# ╔═╡ ae298236-2cad-4d9c-8247-b6c82af753fd
@htl("<h6>From this simulation, called a <b>Monte Carlo Simulation</b>, we get that the experimental probability is:</h6>")

# ╔═╡ 380d264e-6992-4155-bc02-1ff7ad5ff0cf
length(validPoints) / m

# ╔═╡ 6f167e39-c8cb-4321-ae53-0fd86ed8eef1
@htl("<h6>The exact area under the curve in this region can be found using integration to be:
$(md"$Area = \frac{5}{3} = 1.\overline{6}$")</h6>")

# ╔═╡ e9a7935f-be4a-4ec4-b5fc-d98690d89353
@htl("
<div style=\"margin: 0 auto; width:80%;\">
	$(question_box(@htl("<h6>Does this make sense for the empirical probability?</h6>")))
</div>
")

# ╔═╡ bc3b2676-fe69-472b-a054-29aed1a0141b
@htl("
<div style=\"margin: 0 auto; width:80%;\">
	$(question_box(@htl("<h6>What do you think Monte Carlo Integration says in general?</h6>")))
</div>
")

# ╔═╡ b6cdd1ed-50ac-46d1-bed4-7f9b08652c96
@htl("
<div style=\"margin: 0 auto; width:80%;\">
	$(question_box(@htl("<h6>How could you change this for more complicated graphed regions?</h6>")))
</div>
")

# ╔═╡ 00000000-0000-0000-0000-000000000001
PLUTO_PROJECT_TOML_CONTENTS = """
[deps]
HypertextLiteral = "ac1192a8-f4b3-4bfe-ba22-af5b92cd3ab2"
LaTeXStrings = "b964fa9f-0449-5b57-a5c2-d3ea65f4040f"
PlutoTeachingTools = "661c6b06-c737-4d37-b85c-46df65de6f69"
PlutoUI = "7f904dfe-b85e-4ff6-b463-dae2292396a8"
StatsBase = "2913bbd2-ae8a-5f71-8c99-4fb6c76f3a91"

[compat]
HypertextLiteral = "~0.9.5"
LaTeXStrings = "~1.3.1"
PlutoTeachingTools = "~0.2.15"
PlutoUI = "~0.7.60"
StatsBase = "~0.34.3"
"""

# ╔═╡ 00000000-0000-0000-0000-000000000002
PLUTO_MANIFEST_TOML_CONTENTS = """
# This file is machine-generated - editing it directly is not advised

julia_version = "1.10.5"
manifest_format = "2.0"
project_hash = "97cfc36ea04299886c5ac56cbf26893317d88b86"

[[deps.AbstractPlutoDingetjes]]
deps = ["Pkg"]
git-tree-sha1 = "6e1d2a35f2f90a4bc7c2ed98079b2ba09c35b83a"
uuid = "6e696c72-6542-2067-7265-42206c756150"
version = "1.3.2"

[[deps.ArgTools]]
uuid = "0dad84c5-d112-42e6-8d28-ef12dabb789f"
version = "1.1.1"

[[deps.Artifacts]]
uuid = "56f22d72-fd6d-98f1-02f0-08ddc0907c33"

[[deps.Base64]]
uuid = "2a0f44e3-6c83-55bd-87e4-b1978d98bd5f"

[[deps.CodeTracking]]
deps = ["InteractiveUtils", "UUIDs"]
git-tree-sha1 = "7eee164f122511d3e4e1ebadb7956939ea7e1c77"
uuid = "da1fd8a2-8d9e-5ec2-8556-3022fb5608a2"
version = "1.3.6"

[[deps.ColorTypes]]
deps = ["FixedPointNumbers", "Random"]
git-tree-sha1 = "b10d0b65641d57b8b4d5e234446582de5047050d"
uuid = "3da002f7-5984-5a60-b8a6-cbb66c0b333f"
version = "0.11.5"

[[deps.Compat]]
deps = ["TOML", "UUIDs"]
git-tree-sha1 = "8ae8d32e09f0dcf42a36b90d4e17f5dd2e4c4215"
uuid = "34da2185-b29b-5c13-b0c7-acf172513d20"
version = "4.16.0"
weakdeps = ["Dates", "LinearAlgebra"]

    [deps.Compat.extensions]
    CompatLinearAlgebraExt = "LinearAlgebra"

[[deps.CompilerSupportLibraries_jll]]
deps = ["Artifacts", "Libdl"]
uuid = "e66e0078-7015-5450-92f7-15fbd957f2ae"
version = "1.1.1+0"

[[deps.DataAPI]]
git-tree-sha1 = "abe83f3a2f1b857aac70ef8b269080af17764bbe"
uuid = "9a962f9c-6df0-11e9-0e5d-c546b8b5ee8a"
version = "1.16.0"

[[deps.DataStructures]]
deps = ["Compat", "InteractiveUtils", "OrderedCollections"]
git-tree-sha1 = "1d0a14036acb104d9e89698bd408f63ab58cdc82"
uuid = "864edb3b-99cc-5e75-8d2d-829cb0a9cfe8"
version = "0.18.20"

[[deps.Dates]]
deps = ["Printf"]
uuid = "ade2ca70-3891-5945-98fb-dc099432e06a"

[[deps.Distributed]]
deps = ["Random", "Serialization", "Sockets"]
uuid = "8ba89e20-285c-5b6f-9357-94700520ee1b"

[[deps.DocStringExtensions]]
deps = ["LibGit2"]
git-tree-sha1 = "2fb1e02f2b635d0845df5d7c167fec4dd739b00d"
uuid = "ffbed154-4ef7-542d-bbb7-c09d3a79fcae"
version = "0.9.3"

[[deps.Downloads]]
deps = ["ArgTools", "FileWatching", "LibCURL", "NetworkOptions"]
uuid = "f43a241f-c20a-4ad4-852c-f6b1247861c6"
version = "1.6.0"

[[deps.FileWatching]]
uuid = "7b1f6079-737a-58dc-b8bc-7a2ca5c1b5ee"

[[deps.FixedPointNumbers]]
deps = ["Statistics"]
git-tree-sha1 = "05882d6995ae5c12bb5f36dd2ed3f61c98cbb172"
uuid = "53c48c17-4a7d-5ca2-90c5-79b7896eea93"
version = "0.8.5"

[[deps.Format]]
git-tree-sha1 = "9c68794ef81b08086aeb32eeaf33531668d5f5fc"
uuid = "1fa38f19-a742-5d3f-a2b9-30dd87b9d5f8"
version = "1.3.7"

[[deps.Hyperscript]]
deps = ["Test"]
git-tree-sha1 = "179267cfa5e712760cd43dcae385d7ea90cc25a4"
uuid = "47d2ed2b-36de-50cf-bf87-49c2cf4b8b91"
version = "0.0.5"

[[deps.HypertextLiteral]]
deps = ["Tricks"]
git-tree-sha1 = "7134810b1afce04bbc1045ca1985fbe81ce17653"
uuid = "ac1192a8-f4b3-4bfe-ba22-af5b92cd3ab2"
version = "0.9.5"

[[deps.IOCapture]]
deps = ["Logging", "Random"]
git-tree-sha1 = "b6d6bfdd7ce25b0f9b2f6b3dd56b2673a66c8770"
uuid = "b5f81e59-6552-4d32-b1f0-c071b021bf89"
version = "0.2.5"

[[deps.InteractiveUtils]]
deps = ["Markdown"]
uuid = "b77e0a4c-d291-57a0-90e8-8db25a27a240"

[[deps.IrrationalConstants]]
git-tree-sha1 = "630b497eafcc20001bba38a4651b327dcfc491d2"
uuid = "92d709cd-6900-40b7-9082-c6be49f344b6"
version = "0.2.2"

[[deps.JSON]]
deps = ["Dates", "Mmap", "Parsers", "Unicode"]
git-tree-sha1 = "31e996f0a15c7b280ba9f76636b3ff9e2ae58c9a"
uuid = "682c06a0-de6a-54ab-a142-c8b1cf79cde6"
version = "0.21.4"

[[deps.JuliaInterpreter]]
deps = ["CodeTracking", "InteractiveUtils", "Random", "UUIDs"]
git-tree-sha1 = "4b415b6cccb9ab61fec78a621572c82ac7fa5776"
uuid = "aa1ae85d-cabe-5617-a682-6adf51b2e16a"
version = "0.9.35"

[[deps.LaTeXStrings]]
git-tree-sha1 = "50901ebc375ed41dbf8058da26f9de442febbbec"
uuid = "b964fa9f-0449-5b57-a5c2-d3ea65f4040f"
version = "1.3.1"

[[deps.Latexify]]
deps = ["Format", "InteractiveUtils", "LaTeXStrings", "MacroTools", "Markdown", "OrderedCollections", "Requires"]
git-tree-sha1 = "ce5f5621cac23a86011836badfedf664a612cee4"
uuid = "23fbe1c1-3f47-55db-b15f-69d7ec21a316"
version = "0.16.5"

    [deps.Latexify.extensions]
    DataFramesExt = "DataFrames"
    SparseArraysExt = "SparseArrays"
    SymEngineExt = "SymEngine"

    [deps.Latexify.weakdeps]
    DataFrames = "a93c6f00-e57d-5684-b7b6-d8193f3e46c0"
    SparseArrays = "2f01184e-e22b-5df5-ae63-d93ebab69eaf"
    SymEngine = "123dc426-2d89-5057-bbad-38513e3affd8"

[[deps.LibCURL]]
deps = ["LibCURL_jll", "MozillaCACerts_jll"]
uuid = "b27032c2-a3e7-50c8-80cd-2d36dbcbfd21"
version = "0.6.4"

[[deps.LibCURL_jll]]
deps = ["Artifacts", "LibSSH2_jll", "Libdl", "MbedTLS_jll", "Zlib_jll", "nghttp2_jll"]
uuid = "deac9b47-8bc7-5906-a0fe-35ac56dc84c0"
version = "8.4.0+0"

[[deps.LibGit2]]
deps = ["Base64", "LibGit2_jll", "NetworkOptions", "Printf", "SHA"]
uuid = "76f85450-5226-5b5a-8eaa-529ad045b433"

[[deps.LibGit2_jll]]
deps = ["Artifacts", "LibSSH2_jll", "Libdl", "MbedTLS_jll"]
uuid = "e37daf67-58a4-590a-8e99-b0245dd2ffc5"
version = "1.6.4+0"

[[deps.LibSSH2_jll]]
deps = ["Artifacts", "Libdl", "MbedTLS_jll"]
uuid = "29816b5a-b9ab-546f-933c-edad1886dfa8"
version = "1.11.0+1"

[[deps.Libdl]]
uuid = "8f399da3-3557-5675-b5ff-fb832c97cbdb"

[[deps.LinearAlgebra]]
deps = ["Libdl", "OpenBLAS_jll", "libblastrampoline_jll"]
uuid = "37e2e46d-f89d-539d-b4ee-838fcccc9c8e"

[[deps.LogExpFunctions]]
deps = ["DocStringExtensions", "IrrationalConstants", "LinearAlgebra"]
git-tree-sha1 = "a2d09619db4e765091ee5c6ffe8872849de0feea"
uuid = "2ab3a3ac-af41-5b50-aa03-7779005ae688"
version = "0.3.28"

    [deps.LogExpFunctions.extensions]
    LogExpFunctionsChainRulesCoreExt = "ChainRulesCore"
    LogExpFunctionsChangesOfVariablesExt = "ChangesOfVariables"
    LogExpFunctionsInverseFunctionsExt = "InverseFunctions"

    [deps.LogExpFunctions.weakdeps]
    ChainRulesCore = "d360d2e6-b24c-11e9-a2a3-2a2ae2dbcce4"
    ChangesOfVariables = "9e997f8a-9a97-42d5-a9f1-ce6bfc15e2c0"
    InverseFunctions = "3587e190-3f89-42d0-90ee-14403ec27112"

[[deps.Logging]]
uuid = "56ddb016-857b-54e1-b83d-db4d58db5568"

[[deps.LoweredCodeUtils]]
deps = ["JuliaInterpreter"]
git-tree-sha1 = "1ce1834f9644a8f7c011eb0592b7fd6c42c90653"
uuid = "6f1432cf-f94c-5a45-995e-cdbf5db27b0b"
version = "3.0.1"

[[deps.MIMEs]]
git-tree-sha1 = "65f28ad4b594aebe22157d6fac869786a255b7eb"
uuid = "6c6e2e6c-3030-632d-7369-2d6c69616d65"
version = "0.1.4"

[[deps.MacroTools]]
deps = ["Markdown", "Random"]
git-tree-sha1 = "2fa9ee3e63fd3a4f7a9a4f4744a52f4856de82df"
uuid = "1914dd2f-81c6-5fcd-8719-6d5c9610ff09"
version = "0.5.13"

[[deps.Markdown]]
deps = ["Base64"]
uuid = "d6f4376e-aef5-505a-96c1-9c027394607a"

[[deps.MbedTLS_jll]]
deps = ["Artifacts", "Libdl"]
uuid = "c8ffd9c3-330d-5841-b78e-0817d7145fa1"
version = "2.28.2+1"

[[deps.Missings]]
deps = ["DataAPI"]
git-tree-sha1 = "ec4f7fbeab05d7747bdf98eb74d130a2a2ed298d"
uuid = "e1d29d7a-bbdc-5cf2-9ac0-f12de2c33e28"
version = "1.2.0"

[[deps.Mmap]]
uuid = "a63ad114-7e13-5084-954f-fe012c677804"

[[deps.MozillaCACerts_jll]]
uuid = "14a3606d-f60d-562e-9121-12d972cd8159"
version = "2023.1.10"

[[deps.NetworkOptions]]
uuid = "ca575930-c2e3-43a9-ace4-1e988b2c1908"
version = "1.2.0"

[[deps.OpenBLAS_jll]]
deps = ["Artifacts", "CompilerSupportLibraries_jll", "Libdl"]
uuid = "4536629a-c528-5b80-bd46-f80d51c5b363"
version = "0.3.23+4"

[[deps.OrderedCollections]]
git-tree-sha1 = "dfdf5519f235516220579f949664f1bf44e741c5"
uuid = "bac558e1-5e72-5ebc-8fee-abe8a469f55d"
version = "1.6.3"

[[deps.Parsers]]
deps = ["Dates", "PrecompileTools", "UUIDs"]
git-tree-sha1 = "8489905bcdbcfac64d1daa51ca07c0d8f0283821"
uuid = "69de0a69-1ddd-5017-9359-2bf0b02dc9f0"
version = "2.8.1"

[[deps.Pkg]]
deps = ["Artifacts", "Dates", "Downloads", "FileWatching", "LibGit2", "Libdl", "Logging", "Markdown", "Printf", "REPL", "Random", "SHA", "Serialization", "TOML", "Tar", "UUIDs", "p7zip_jll"]
uuid = "44cfe95a-1eb2-52ea-b672-e2afdf69b78f"
version = "1.10.0"

[[deps.PlutoHooks]]
deps = ["InteractiveUtils", "Markdown", "UUIDs"]
git-tree-sha1 = "072cdf20c9b0507fdd977d7d246d90030609674b"
uuid = "0ff47ea0-7a50-410d-8455-4348d5de0774"
version = "0.0.5"

[[deps.PlutoLinks]]
deps = ["FileWatching", "InteractiveUtils", "Markdown", "PlutoHooks", "Revise", "UUIDs"]
git-tree-sha1 = "8f5fa7056e6dcfb23ac5211de38e6c03f6367794"
uuid = "0ff47ea0-7a50-410d-8455-4348d5de0420"
version = "0.1.6"

[[deps.PlutoTeachingTools]]
deps = ["Downloads", "HypertextLiteral", "LaTeXStrings", "Latexify", "Markdown", "PlutoLinks", "PlutoUI", "Random"]
git-tree-sha1 = "5d9ab1a4faf25a62bb9d07ef0003396ac258ef1c"
uuid = "661c6b06-c737-4d37-b85c-46df65de6f69"
version = "0.2.15"

[[deps.PlutoUI]]
deps = ["AbstractPlutoDingetjes", "Base64", "ColorTypes", "Dates", "FixedPointNumbers", "Hyperscript", "HypertextLiteral", "IOCapture", "InteractiveUtils", "JSON", "Logging", "MIMEs", "Markdown", "Random", "Reexport", "URIs", "UUIDs"]
git-tree-sha1 = "eba4810d5e6a01f612b948c9fa94f905b49087b0"
uuid = "7f904dfe-b85e-4ff6-b463-dae2292396a8"
version = "0.7.60"

[[deps.PrecompileTools]]
deps = ["Preferences"]
git-tree-sha1 = "5aa36f7049a63a1528fe8f7c3f2113413ffd4e1f"
uuid = "aea7be01-6a6a-4083-8856-8a6e6704d82a"
version = "1.2.1"

[[deps.Preferences]]
deps = ["TOML"]
git-tree-sha1 = "9306f6085165d270f7e3db02af26a400d580f5c6"
uuid = "21216c6a-2e73-6563-6e65-726566657250"
version = "1.4.3"

[[deps.Printf]]
deps = ["Unicode"]
uuid = "de0858da-6303-5e67-8744-51eddeeeb8d7"

[[deps.REPL]]
deps = ["InteractiveUtils", "Markdown", "Sockets", "Unicode"]
uuid = "3fa0cd96-eef1-5676-8a61-b3b8758bbffb"

[[deps.Random]]
deps = ["SHA"]
uuid = "9a3f8284-a2c9-5f02-9a11-845980a1fd5c"

[[deps.Reexport]]
git-tree-sha1 = "45e428421666073eab6f2da5c9d310d99bb12f9b"
uuid = "189a3867-3050-52da-a836-e630ba90ab69"
version = "1.2.2"

[[deps.Requires]]
deps = ["UUIDs"]
git-tree-sha1 = "838a3a4188e2ded87a4f9f184b4b0d78a1e91cb7"
uuid = "ae029012-a4dd-5104-9daa-d747884805df"
version = "1.3.0"

[[deps.Revise]]
deps = ["CodeTracking", "Distributed", "FileWatching", "JuliaInterpreter", "LibGit2", "LoweredCodeUtils", "OrderedCollections", "REPL", "Requires", "UUIDs", "Unicode"]
git-tree-sha1 = "7b7850bb94f75762d567834d7e9802fc22d62f9c"
uuid = "295af30f-e4ad-537b-8983-00126c2a3abe"
version = "3.5.18"

[[deps.SHA]]
uuid = "ea8e919c-243c-51af-8825-aaa63cd721ce"
version = "0.7.0"

[[deps.Serialization]]
uuid = "9e88b42a-f829-5b0c-bbe9-9e923198166b"

[[deps.Sockets]]
uuid = "6462fe0b-24de-5631-8697-dd941f90decc"

[[deps.SortingAlgorithms]]
deps = ["DataStructures"]
git-tree-sha1 = "66e0a8e672a0bdfca2c3f5937efb8538b9ddc085"
uuid = "a2af1166-a08f-5f64-846c-94a0d3cef48c"
version = "1.2.1"

[[deps.SparseArrays]]
deps = ["Libdl", "LinearAlgebra", "Random", "Serialization", "SuiteSparse_jll"]
uuid = "2f01184e-e22b-5df5-ae63-d93ebab69eaf"
version = "1.10.0"

[[deps.Statistics]]
deps = ["LinearAlgebra", "SparseArrays"]
uuid = "10745b16-79ce-11e8-11f9-7d13ad32a3b2"
version = "1.10.0"

[[deps.StatsAPI]]
deps = ["LinearAlgebra"]
git-tree-sha1 = "1ff449ad350c9c4cbc756624d6f8a8c3ef56d3ed"
uuid = "82ae8749-77ed-4fe6-ae5f-f523153014b0"
version = "1.7.0"

[[deps.StatsBase]]
deps = ["DataAPI", "DataStructures", "LinearAlgebra", "LogExpFunctions", "Missings", "Printf", "Random", "SortingAlgorithms", "SparseArrays", "Statistics", "StatsAPI"]
git-tree-sha1 = "5cf7606d6cef84b543b483848d4ae08ad9832b21"
uuid = "2913bbd2-ae8a-5f71-8c99-4fb6c76f3a91"
version = "0.34.3"

[[deps.SuiteSparse_jll]]
deps = ["Artifacts", "Libdl", "libblastrampoline_jll"]
uuid = "bea87d4a-7f5b-5778-9afe-8cc45184846c"
version = "7.2.1+1"

[[deps.TOML]]
deps = ["Dates"]
uuid = "fa267f1f-6049-4f14-aa54-33bafae1ed76"
version = "1.0.3"

[[deps.Tar]]
deps = ["ArgTools", "SHA"]
uuid = "a4e569a6-e804-4fa4-b0f3-eef7a1d5b13e"
version = "1.10.0"

[[deps.Test]]
deps = ["InteractiveUtils", "Logging", "Random", "Serialization"]
uuid = "8dfed614-e22c-5e08-85e1-65c5234f0b40"

[[deps.Tricks]]
git-tree-sha1 = "7822b97e99a1672bfb1b49b668a6d46d58d8cbcb"
uuid = "410a4b4d-49e4-4fbc-ab6d-cb71b17b3775"
version = "0.1.9"

[[deps.URIs]]
git-tree-sha1 = "67db6cc7b3821e19ebe75791a9dd19c9b1188f2b"
uuid = "5c2747f8-b7ea-4ff2-ba2e-563bfd36b1d4"
version = "1.5.1"

[[deps.UUIDs]]
deps = ["Random", "SHA"]
uuid = "cf7118a7-6976-5b1a-9a39-7adc72f591a4"

[[deps.Unicode]]
uuid = "4ec0a83e-493e-50e2-b9ac-8f72acf5a8f5"

[[deps.Zlib_jll]]
deps = ["Libdl"]
uuid = "83775a58-1f1d-513f-b197-d71354ab007a"
version = "1.2.13+1"

[[deps.libblastrampoline_jll]]
deps = ["Artifacts", "Libdl"]
uuid = "8e850b90-86db-534c-a0d3-1478176c7d93"
version = "5.11.0+0"

[[deps.nghttp2_jll]]
deps = ["Artifacts", "Libdl"]
uuid = "8e850ede-7688-5339-a07c-302acd2aaf8d"
version = "1.52.0+1"

[[deps.p7zip_jll]]
deps = ["Artifacts", "Libdl"]
uuid = "3f19e933-33d8-53b3-aaab-bd5110c3b7a0"
version = "17.4.0+2"
"""

# ╔═╡ Cell order:
# ╟─c18b2f58-0c46-4668-ab95-c2d8377d6ae1
# ╟─4a8b4ce5-997b-4737-8f2a-acbd983fa57e
# ╟─ff120624-320f-41a6-8606-24d660d7f080
# ╟─27255d3f-8fe2-4b09-86b3-dcccf60122dd
# ╠═eaa7c909-de3c-442b-9fae-7b10f00b7cbd
# ╟─053fdb33-1029-41d8-a144-c990b2a8d3a6
# ╟─7a9b1f1b-3cbb-4b82-99c1-67ed598f6297
# ╟─8499f7f7-22f5-4dd1-a619-a531e35daf92
# ╟─8d8c78e4-9796-4c34-a568-84650e9838aa
# ╟─45776f66-9f41-4a45-9434-3d1b31a5ad7d
# ╟─1aa6d170-66a6-48da-983e-29fb5477d58f
# ╟─66b02b82-7de5-4c49-99d5-105e48d71318
# ╟─a9af8a68-e254-4f65-96e1-cd16c180d590
# ╟─80b9787b-306d-45f4-bce0-eb4c7f7eb21c
# ╟─8c93ef25-8158-4927-992b-065313f41d3c
# ╟─41a8ce83-ce37-47c5-b382-f930687d44a3
# ╟─f625a360-c274-4c82-a675-02f0b0e35e3e
# ╟─4a3daf2d-7f2c-4dba-abd2-74ad7c331e17
# ╟─6737889c-9463-4295-b501-92c778db3b54
# ╟─e0761f23-5e9e-46fb-9195-11862782bb7d
# ╟─51cbf4dd-b6a3-416f-a552-a8976af83055
# ╟─e35fedd6-857e-418c-be4d-8d2c38704012
# ╟─8075113f-9c13-4217-82ff-5b41c0942b82
# ╟─915e0506-0010-4ef9-8594-95f898e21569
# ╟─da05eb28-40b6-42f9-bd2b-6b6006f5a786
# ╟─da443a18-54c6-4f60-8295-da21a4c0d781
# ╟─80e42029-9437-4962-92a4-e6737550b281
# ╟─9e3a353e-7d67-4c4e-a77f-c4ff6e2cb2e5
# ╠═1680befd-f3c5-4ae0-b057-4ef6fc7741de
# ╟─d1162602-ac39-4202-85ec-f7162eca861f
# ╟─87774a82-be4b-4898-9184-5bdb3ffb1a9a
# ╠═b1809169-f076-40a9-8858-418174f90114
# ╠═54df423a-438e-43b2-a52f-dffdedb5f337
# ╟─82f7d885-3c6a-472e-88ae-3ae87c3c2fd2
# ╟─a99cd78b-3379-4c3b-830b-3b560c0e3085
# ╟─ce781ed3-22c9-4daa-9299-72bfc09a1089
# ╟─6414f70a-c192-4367-91ff-92709dd75e6f
# ╟─d864111f-8d96-47e8-8dea-2aa8f29a4385
# ╟─0a5dc2b3-1156-4b2d-94d3-3b49dcbe7653
# ╟─01923e40-fe6d-497b-a83f-f6c77b10116c
# ╟─3cfe8aef-fb09-4ade-a7e3-999d5acbbbb2
# ╟─e89484e7-95f1-44f1-8978-6d9a489aa2f8
# ╠═da443069-96bc-4463-8df5-6a7b7b936dd6
# ╟─f532f07d-a247-47af-8844-2df72329bea7
# ╟─f62f33c7-dc00-47bf-9e0e-56f804b02ae0
# ╟─e1192a15-eb97-498d-9c83-0ca2e3548c91
# ╠═76c6c5a2-0b5c-4661-8960-3b2416e0b2d3
# ╟─7e61731a-7635-47f3-9a22-a50b0345c626
# ╠═f7d17562-f27c-45d9-a2e6-51d7e87b87b2
# ╟─31468534-8ef7-4d19-9594-7d8aa4d7e533
# ╠═9b65092a-d1d2-48f1-8c78-0625ef11db0d
# ╟─5b5d5ca7-f320-43b9-bfba-b70c08d41c63
# ╟─e830da51-c55f-43fb-a57e-715d4eced3a9
# ╟─c630e5be-601f-4927-8658-60e44d13c4de
# ╟─87fcdb54-e11b-4298-b8a7-12bc25d65449
# ╠═4c3661e8-2985-4a17-b617-ec2be9cafb90
# ╠═0d7a44a2-2fec-4246-b0fe-8669f0f2b973
# ╟─ae298236-2cad-4d9c-8247-b6c82af753fd
# ╠═380d264e-6992-4155-bc02-1ff7ad5ff0cf
# ╟─6f167e39-c8cb-4321-ae53-0fd86ed8eef1
# ╟─e9a7935f-be4a-4ec4-b5fc-d98690d89353
# ╟─bc3b2676-fe69-472b-a054-29aed1a0141b
# ╟─b6cdd1ed-50ac-46d1-bed4-7f9b08652c96
# ╟─00000000-0000-0000-0000-000000000001
# ╟─00000000-0000-0000-0000-000000000002
